<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: pt_BR | anselmolsm.org]]></title>
  <link href="http://anselmolsm.org/blog/categories/pt-br/atom.xml" rel="self"/>
  <link href="http://anselmolsm.org/"/>
  <updated>2013-01-07T00:54:59-02:00</updated>
  <id>http://anselmolsm.org/</id>
  <author>
    <name><![CDATA[Anselmo L. S. Melo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Qt Platform Abstraction, Lighthouse para os íntimos]]></title>
    <link href="http://anselmolsm.org/blog/qt-platform-abstraction-lighthouse-para-os-intimos/"/>
    <updated>2012-03-16T00:00:00-03:00</updated>
    <id>http://anselmolsm.org/blog/qt-platform-abstraction-lighthouse-para-os-intimos</id>
    <content type="html"><![CDATA[<p><em>Originalmente publicado em http://blog.qtlabs.org.br/2012/03/16/qt-platform-abstraction-lighthouse-para-os-intimos/</em></p>

<p>É do conhecimento de muitos que Qt é oficialmente suportado em várias plataformas. Recentemente, graças aos esforços da comunidade, novas plataformas passaram a ser suportadas - ainda de forma não oficial - com destaque para Android e iOS. No <em>post</em> de hoje, faremos uma breve introdução à nova estrutura que tem como objetivo simplificar novos <em>ports</em> de Qt, o QPA - Qt Platform Abstraction, <em>codename</em> Lighthouse.</p></p>

<p><strong><em>Começo</em></strong></p>

<p>Em meados de 2009 alguns dos desenvolvedores baseados em Oslo resolveram refatorar o código existente no chamado Qt for Embedded, que é, resumidamente, focada em dispositivos embarcados sem Xorg (no caso do Qt for Embedded Linux), usando <em>framebuffer</em> para a saída gráfica. Nele, existe o QWS - Q Windowing System - que faz as vezes de sistema de janelas simples. A idéia de refatorar tal código era justamente para reduzir a dependência do QWS, porém foram anos de "contaminação" de código e essa tarefa demonstrou-se maior do que o esperado. Foi então que surgiu uma ideia:</p>

<blockquote>Quão difícil seria remover todo o código específico de plataformas e ter um novo <em>port</em> compilável?</blockquote>


<p>Parte do plano era aproveitar que Qt já contava com a Raster Engine e os <a href="http://blog.qt.digia.com/blog/2007/08/09/qt-invaded-by-aliens-the-end-of-all-flicker">Alien Widgets já haviam invadido e fixado residência no Qt 4.4</a>. Uma semana mais tarde, já existia um código para QtGui independente de plataforma e compilado com sucesso.</p>

<p><strong><em>Raster Engine? Alien widgets?</em></strong></p>

<p>Ambos são potenciais temas para novos posts, segue uma rápida (e, digamos, superficial) explicação para que possamos seguir com nosso assunto:</p>

<ul>
<li><em>Raster Engine</em> é um sistema gráfico implementado totalmente em software, ou seja, de forma independente do hardware onde está sendo executado. Foi introduzido no Qt 4.0 após repetidas tentativas de utilizar GDI e GDI+ (APIs nativas do Microsoft Windows) para backend gráfico de Qt no MicrosoftWindows.</li>
<li><em>Alien Widgets</em> é o nome dado à uma forma como os widgets são criados na tela. Para nossa rápida explicação de hoje, usaremos terminologia do Xorg. Tradicionalmente, cada widget era na verdade uma "janela do X". Assim, uma tela com o que costumamos chamar de janela, contendo um botão e um checkbox teria, em termos de estruturas do X, 3 janelas, sendo que 2 delas aninhadas em uma maior. Essa combinação toda era grande responsável por efeitos visuais indesejáveis quando redimensionávamos aplicações, pois o Xserver precisava coordenar a movimentação e redimensionamento desses componentes, o que não acabava bem. Com os Alien Widgets acontece diferente: O Xserver conhece apenas a janela <em>top level</em>, os widgets dentro dela ficam por conta da maquinaria interna do Qt.</li>
</ul>


<p><strong><em>Voltando ao assunto</em></strong></p>

<p>O próximo passo seria conseguir criar um processo único com uma janela <em>full-screen</em> utlizando <em>framebuffer</em>, aproveitando-se dessa infra-estrutura. Com o sucesso desse experimento, o projeto tomou forma e recebeu o nome de <em>Lighthouse,</em> tendo como objetivo: "Como tornar mais fácil Qt suportar diferentes hardwares gráficos". Com <em>Lighthouse</em>, um <em>port</em> passa a precisar de um <em>plugin</em> que implemente a representação de janelas (<em>window surfaces</em>) para dado cliente (ex: x11 client) e funcionalidades para envio e recebimento de mensagens para o servidor do sistema de janelas (window system server). Um primeiro <em>port</em> teste feito, utilizando QImage como <em>display device</em>, precisou deapenas 147 linhas de código. Prefere uma comparação de uma classe real? qwidget_x11.cpp: 2424 linhas, qwidget_qpa.cpp: 671 linhas. O código correspondente à essa reengenharia já encontra-se integrado no branch 4.8, com o nome <em>Qt Platform Abstraction</em>. Portanto, aqueles que tiverem o repositório clonado podem observar em src/gui/kernel a existência de arquivos com o sufixo _qpa.h:</p>

<ul>
<li>qplatformclipboard_qpa.h</li>
<li>qplatformcursor_qpa.h</li>
<li>qplatformeventloopintegration_qpa.h</li>
<li>qplatformglcontext_qpa.h</li>
<li>qplatformintegrationplugin_qpa.h</li>
<li>qplatformintegration_qpa.h</li>
<li>qplatformnativeinterface_qpa.h</li>
<li>qplatformscreen_qpa.h</li>
<li>qplatformwindowformat_qpa.h</li>
<li>qplatformwindow_qpa.h</li>
</ul>


<p>Analisando os nomes desses arquivos (e das classes contidas neles) notamos os componentes que devem ser implementados em um novo port de Qt. Além dos já mencionados ports para Android (Necessitas) e iOS, são outros exemplos que aproveitaram do Lighthouse:</p>

<p>libCaca: convertendo widgets para modo texto. Útil? Não sei, mas vale para exemplificar como ficou mais fácil <em>portar</em> Qt =)</p>

<p><iframe width="560" height="420" src="http://www.youtube.com/embed/ZJyF99uqSbY?color=white&theme=light"></iframe></p>

<p>Qt on <a href="http://en.wikipedia.org/wiki/Google_Native_Client">NaCl</a>:
<iframe width="560" height="420" src="http://www.youtube.com/embed/U6xZsqcA-Sk?color=white&theme=light"></iframe></p>

<p>A tarefa de suportar o Wayland também foi beneficiada por essa nova estrutura, que também está tendo um importante papel no desenvovimento do futuro Qt5. Para referência, os artigos no Qt Labs a respeito desse assunto estão dentro da <a href="http://blog.qt.digia.com/blog/category/lighthouse/">categoria lighthouse</a>.</p>

<p>Até a próxima =)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Alguns erros comuns ao herdar de QObject]]></title>
    <link href="http://anselmolsm.org/blog/alguns-erros-comuns-ao-herdar-de-qobject/"/>
    <updated>2011-07-11T00:00:00-03:00</updated>
    <id>http://anselmolsm.org/blog/alguns-erros-comuns-ao-herdar-de-qobject</id>
    <content type="html"><![CDATA[<p><em>Originalmente publicado em http://blog.qtlabs.org.br/2011/07/11/alguns-erros-comuns-ao-herdar-de-qobject</em></p>

<p>Com o passar do tempo, os erros de uma determinada ferramenta tornam-se familiares de tal forma que solucioná-los passa a ser automático. Entretanto, muitos destes erros não são triviais entre iniciantes, que vez ou outra acabam gastando tempo para contorná-los.
Pois vamos tratar de dois que ultimamente tem sido a causa frequente de vários tópicos criados na <a href="http://developer.qt.nokia.com/">Qt Devnet</a>. Portanto, se você ainda está se familiarizando com Qt, o texto de hoje é para você. Se você já tem alguma experiência com Qt, vai se lembrar da primeira vez que passou por isso ;)</p>

<p>Consideremos a seguinte declaração de classe:</p>

<p>```
class MyClass:public QObject
{</p>

<pre><code>public:
MyClass(QObject * parent=0);
</code></pre>

<p>signals:</p>

<pre><code>void aSignal();
</code></pre>

<p>public slots:</p>

<pre><code>void aSlot();
</code></pre>

<p>};
```</p>

<p>Pois bem, você declarou uma classe herdando de QObject e criou um novo sinal e um novo slot. Após conectar este sinal e/ou este slot, você partiu feliz para testar sua aplicação porém nada funciona e você recebe o seguinte alerta:</p>

<p><code>
No such signal QObject::aSignal()
</code></p>

<p>E por alguns instantes a pergunta que fica é:</p>

<blockquote><p>Mas afinal, o que terá acontecido?</p></blockquote>


<p>Aí que entra um detalhe que passa muitas vezes despercebido entre aqueles que partem estusiasmados para o código: Você esqueceu-se da macro Q_OBJECT na declaração de sua classe. Com alguma prática, alguns resolverão a questão rapidamente e serão felizes. No entanto, outros adicionarão a macro citada e acabarão agora "ouvindo" as seguintes palavras do compilador:</p>

<p><code>
main.cpp:(.text+0x54): undefined reference to `vtable for MyClass'
</code></p>

<p>(ok, ok, senhor purista, é um erro do <em>linker</em>, não do compilador)</p>

<p>Afinal, por que eu disse que alguns resolverão este problema e serão felizes e outros enfrentarão este erro? O que eles fizeram de diferente?</p>

<p>Bem, caro leitor, a diferença é que o primeiro lembrou-se de executar <strong><em>qmake</em></strong> depois de adicionar a macro Q_OBJECT, enquanto o segundo partiu ansioso para apenas compilar o projeto.</p>

<p><strong>qmake? Q_OBJECT?</strong></p>

<p>Bem, vamos entender o que aconteceu.</p>

<p>Conforme está escrito na documentação, quando uma classe herda QObject, seja direta ou indiretamente, <em>e</em> declara novas propriedades <a href="http://doc.qt.nokia.com/4.7/qobject.html#Q_PROPERTY">Q_PROPERTY</a> e/ou novos sinais e/ou slots (vale também para reimplementações), torna-se necessária a adição da macro Q_OBJECT em sua declaração. De forma resumida, esta macro serve como indicador de que o <a href="http://doc.qt.nokia.com/4.7/moc.html">Qt Meta-Object Compiler</a> - mas pode chamar de <strong>moc</strong> - deve processar esta classe e gerar o arquivo .moc correspondete.</p>

<p>Assim, na primeira situação descrita no início deste texto, o código de fato herda de QObject e declara um novo sinal e um novo slot, porém não apresenta a macro Q_OBJECT. A classe é compilada normalmente, entretanto, não acontece a resolução das informações adicionadas pelo sistema de meta objetos do Qt (no exemplo, o sinal aSignal() não é encontrado). Na sequência, quando segundo usuário adiciona Q_OBJECT e parte direto para o <strong><em>make</em></strong>, acontece um erro de ligação pois falta o arquivo .moc correspondente, onde estariam os símbolos faltantes. Este arquivo .moc não foi gerado pois, ao não executar qmake, não houve a verificação da necessidade do moc entrar em ação.</p>

<p>Portanto, a declaração correta da classe MyClass é:</p>

<p>```
class MyClass:public QObject
{</p>

<pre><code>Q_OBJECT
</code></pre>

<p>public:</p>

<pre><code>MyClass(QObject * parent=0);
</code></pre>

<p>signals:</p>

<pre><code>void aSignal();
</code></pre>

<p>public slots:</p>

<pre><code>void aSlot();
</code></pre>

<p>};
```</p>

<p>Existe ainda um outro caso recorrente cuja solução apresenta uma particularidade. Consideremos a nossa class MyClass,  agora declarada no mesmo arquivo que a função main (digamos, num arquivo chamado main.cpp):</p>

<p>```
class MyClass:public QObject
{</p>

<pre><code>Q_OBJECT
</code></pre>

<p>public:</p>

<pre><code>MyClass(QObject * parent=0)
    : QObject(parent)
{
}
</code></pre>

<p>signals:</p>

<pre><code>void aSignal();
</code></pre>

<p>public slots:</p>

<pre><code>void aSlot()
{
}
</code></pre>

<p>};</p>

<p>int main(int argc, char *argv[])
{</p>

<pre><code>QApplication app(argc, argv);

MyClass myClass;

return app.exec();
</code></pre>

<p>}
```</p>

<p><em>O que há de diferente?</em> - Pergunta você.</p>

<p>A princípio nada demais. Porém, atente ao fato da classe MyClass agora estar no mesmo arquivo que a função main. Ao tentar compilar esta versão do nosso exemplo, mais uma vez aparecerá um erro parecido com:</p>

<p><code>
undefined reference to `vtable for MyClass'
</code></p>

<p>Ao observar a saída da compilação, você nota que o moc nem é executado. Assim, a classe que necessita ser tratada por ele passa em branco. Para contornar este caso, insira a linha:</p>

<p>```</p>

<h1>include "main.moc"</h1>

<p>```</p>

<p>após a declaração da classe e execute qmake. Isso forçará a execução do moc para criar este arquivo main.moc onde estarão os símbolos referentes aos sinais e slots. (Sim, existe <strong><em>automake</em></strong>, mas não estou tratando de ferramentas adicionais aqui, ok?).</p>

<p>Hoje ficamos concentrados na solução de erros comuns envolvendo moc e a macro Q_OBJECT. Futuramente voltaremos a abordar o tema, entrando em mais detalhes quanto ao papel exercido pelo moc e o conteúdo dos arquivos por ele gerados.</p>

<p>Tem mais algum caso comum de erro que seria interessante abordarmos, para auxiliar os iniciantes? Envie suas sugestões ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Só pra não passar em branco =)]]></title>
    <link href="http://anselmolsm.org/blog/so-pra-nao-passar-em-branco/"/>
    <updated>2010-02-21T00:00:00-03:00</updated>
    <id>http://anselmolsm.org/blog/so-pra-nao-passar-em-branco</id>
    <content type="html"><![CDATA[<p>Domingo passado fui ao estádio do Pacembu ver Santos 2 x 1 Rio Claro. Na segunda-feira li na Folha de S. Paulo a <a href="http://blogdotorero.blog.uol.com.br/arch2010-02-01_2010-02-28.html#2010_02-16_10_36_41-10024933-0">coluna de José Roberto Torero</a>, que também foi ao estádio e narrou suas desventuras.</p>

<p>Como passei por situações semelhantes, mandei um breve relato por e-mail. O texto foi publicado no blog do colunista e pode ser conferido <a href="http://blogdotorero.blog.uol.com.br/arch2010-02-01_2010-02-28.html#2010_02-19_10_28_16-10024933-0">aqui</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Operação Boa Viagem - parte 4 (final!)]]></title>
    <link href="http://anselmolsm.org/blog/operacao-boa-viagem-parte-4-final/"/>
    <updated>2009-12-13T00:00:00-02:00</updated>
    <id>http://anselmolsm.org/blog/operacao-boa-viagem-parte-4-final</id>
    <content type="html"><![CDATA[<p>Antes que acabe o ano!!</p>

<p>Neste post, os dois trechos finais da viagem entre Pindamonhangaba, SP e O Recife, PE realizada em Janeiro de 2009. Os demais trechos estão em <a href="http://www.anselmolsm.org/blog/operacao-boa-viagem-parte-1/">Parte 1</a>, <a href="http://www.anselmolsm.org/blog/operacao-boa-viagem-parte-2/">Parte 2</a> e <a href="http://www.anselmolsm.org/blog/operacao-boa-viagem-parte-3/">Parte 3</a>.</p>

<p>Trecho percorrido no dia 3 de Janeiro: de Itabuna, Bahia até Maceió, Alagoas - 880 km.</p>

<p>Até Itabuna, a viagem seguiu dentro do esperado. Distância a ser percorrida era aproximadamente a mesma percorrida entre Macaé e Itabuna (cerca de 1100 km), assim parecia possível terminar a viagem no mesmo dia. É claro que dependia muito da gloriosa BR-101 colaborar.</p>

<p><div class="imagecc" style="width:500px"><a href="/blog/images/2009/12/dsc04711_1.jpg" title="Itabuna"><img src="/blog/images/2009/12/dsc04711_1.jpg" width="480" height="360" alt="Itabuna" border=0></a><br>Itabuna</div></p>

<p>Saindo de Itabuna, ao som da "Gabriela FM" (por causa da Gabriela do Jorge Amado mesmo), coisas curiosas como anúncio "Cala a Boca R$6,00"... depois de uma série de informações desencontradas para voltar à BR101, finalmente às 9h40 a viagem recomeçou de verdade.</p>

<p>O trecho baiano (Pq Bahia tem "h" e baiano não?) que já vinha bem no sul do estado, seguiu muito bom.  Vimos Salvador passar, representada em uma das placas indicando a saída para a capital baiana, e seguimos a viagem rumo a Sergipe. Vale lembrar que de Itabuna à divisa BA | SE são cerca de 500 km.</p>

<p><div class="imagecc" style="width:500px"><a href="/blog/images/2009/12/dsc04723_1_1.jpg" title="Aqui o trânsito parava pra galera comprar coisas, no meio da estrada."><img src="/blog/images/2009/12/dsc04723_1_1.jpg" width="480" height="360" alt="Aqui o trânsito parava pra galera comprar coisas, no meio da estrada." border=0></a><br>Aqui o trânsito parava pra galera comprar coisas, no meio da estrada.</div></p>

<p><div class="imagecc" style="width:500px"><a href="/blog/images/2009/12/dsc04735_1_1.jpg" title="Santo Antônio de Jesus - O comércio mais barato da Bahia"><img src="/blog/images/2009/12/dsc04735_1_1.jpg" width="480" height="360" alt="Santo Antônio de Jesus - O comércio mais barato da Bahia" border=0></a><br>Santo Antônio de Jesus - O comércio mais barato da Bahia</div></p>

<p>Apesar da boa condição da estrada, muito trânsito nesse trecho, com muitos, muitos caminhões. Filas enormes de carros eram formadas, ultrapassagens eram complicadas e uma quantidade enorme de motoristas fazendo verdadeiras loucuras na estrada - Em certo trecho vimos à nossa frente lado-a-lado, 1 caminhão grande, 1 caminhão médio e 1 carro.</p>

<ul>
<li>"- A BR101 é duplicada nesse trecho?"   -  Não.</li>
<li>"- Mas eram quantas faixas no sentido Norte?" - Uma. Sim! O terceiro componente da cena citada estava no acostamento da contra-mão.</li>
</ul>


<p>Paramos no posto Delícias do Sul, em Alagoinhas (14h10), serviu pra explicar bastante o caos presenciado na estrada. Apesar de alguém no planalto central ter dito que é proibido comércio de bebidas alcoólicas em rodovias federais, nos 15 minutos que ficamos no estabelecimento foi um festival de motoristas alternando vinho e/ou cachaça.</p>

<p><div class="imagecc" style="width:500px"><a href="/blog/images/2009/12/dsc04743_1_1.jpg" title="Esplanada"><img src="/blog/images/2009/12/dsc04743_1_1.jpg" width="480" height="360" alt="Esplanada" border=0></a><br>Esplanada</div></p>

<p>E veja nessa foto o que encontramos! Tubos da Tenaris Confab (onde meu pai trabalha) hehe. Aliás, foram vários encontros desses pelo caminho.</p>

<p><div class="imagecc" style="width:530px"><a href="/blog/images/2009/11/itabuna-maceio.png" title="Itabuna - Maceió"><img src="/blog/images/2009/11/itabuna-maceio.png" width="510" height="680" alt="Itabuna - Maceió" border=0></a><br>Itabuna - Maceió</div></p>

<p>Passamos pela divisa BA | SE às 16h.</p>

<p>Com esse conjunto de fatores, a viagem atrasou bastante - houve trecho com velocidade média de 50 km/h. Já anoitecia quando chegamos em Aracaju onde, para ajudar, a BR101 tem um traçado curioso. Foi a primeira vez que presenciei a necessidade de sair da estrada para seguir nela mesma... Seguimos reto e caimos dentro da cidade, daí deu pra tirar essa foto da capital Sergipana até acharmos um retorno.</p>

<p><div class="imagecc" style="width:500px"><a href="/blog/images/2009/12/dsc04835_1_1.jpg" title="Aracaju"><img src="/blog/images/2009/12/dsc04835_1_1.jpg" width="480" height="360" alt="Aracaju" border=0></a><br>Aracaju</div></p>

<p>Após uma rápida parada no posto Presidente, na nossa volta à BR101, a noite já dava as caras e restavam 496 km até Recife. O relógio marcava 17h50 (lembrando que no nordeste anoitece mais cedo), chegaríamos um tanto tarde. Decidimos então ir até Maceió,  263 km e completar a viagem na manhã seguinte.</p>

<p>Com os atrasos e o anoitecer, perdemos uma das mais aguardadas fotos da viagem, na ponte sobre o rio São Francisco, na divisa SE | AL =(  ... só vimos a ponte. (Isso por volta de 19h30).</p>

<p>E a estrada, como estava? Norte de Sergipe: ruim. Entramos em Alagoas, esperanças de melhores condições e, piorou... ficou bem claro que a decisão de ir "só" até Maceió era mesmo o melhor a fazer.</p>

<p>Saímos da BR101 e tomamos uma rodovia estadual (AL216) que estava melhor que a federal e que passa no meio de canaviais sem fim, com movimentação quase que exclusivamente de treminhões àquela hora. Olhando no mapa, dava pra termos saido da BR101 depois, mas no fim deu certo =) .</p>

<p><div class="imagecc" style="width:500px"><a href="/blog/images/2009/12/dsc04901_1_1.jpg" title="Monumento Teotônio Vilela, Maceió"><img src="/blog/images/2009/12/dsc04901_1_1.jpg" width="480" height="360" alt="Monumento Teotônio Vilela, Maceió" border=0></a><br>Monumento Teotônio Vilela, Maceió</div></p>

<p>Na chegada a Maceió (22h10), precisávamos de um lugar para dormir - era uma parada não esperada, portanto não tinhamos reserva alguma. Bom, em se tratando de uma capital turística isso não parecia ser um problema, bastava apenas encontrarmos os hotéis. Depois de ficarmos perdidos na cidade, achamos os hotéis. Lotado, lotado, lotado... até que finalmente achamos um hotel - Ouro Branco. Estranho mesmo era a cidade com hotéis lotados e com ruas vazias às 22h e tantos de um sábado. Para achar um lugar para comer, precisamos da ajuda do recepcionista do hotel que ligou para um restaurante (Imperador dos Camarões - veja você, eu sou alérgico a camarão ehhe) para que ele ficasse aberto por mais um tempo. Situação curiosa da noite, pagamento em cartão tinha que ser feito na porta de entrada do restaurante porque a máquina, via GPRS, não conseguia sinal para operar de dentro do estabelecimento.</p>

<p><div class="imagecc" style="width:412px"><a href="/blog/images/2009/11/maceio-recife.png" title="Maceió - Recife"><img src="/blog/images/2009/11/maceio-recife.png" width="392" height="644" alt="Maceió - Recife" border=0></a><br>Maceió - Recife</div></p>

<p>Na manhã do domingo, 4 de Janeiro, pudemos ver um pouco das praias de Maceió.</p>

<p><div class="imagecc" style="width:500px"><a href="/blog/images/2009/12/dsc04938_1_1.jpg" title="Praia de Pajuçara"><img src="/blog/images/2009/12/dsc04938_1_1.jpg" width="480" height="360" alt="Praia de Pajuçara" border=0></a><br>Praia de Pajuçara</div></p>

<p>Seguindo a viagem, não voltamos para a BR101 e seguimos pelas estradas estaduais beirando o mar. Muito trânsito para sair de Maceió devido à movimentação dos turistas, mas depois estrada bastante tranquila. E nessa tranquilidade fomos parados, pela <strong>primeira vez em toda a viagem</strong>, por uma Polícia Rodoviária (a Estadual de Alagoas). Verificação de documentos, nada demais.</p>

<p><div class="imagecc" style="width:500px"><a href="/blog/images/2009/12/dsc04983_1_1.jpg" title="Uma parada para uma água..."><img src="/blog/images/2009/12/dsc04983_1_1.jpg" width="480" height="360" alt="Uma parada para uma água..." border=0></a><br>Uma parada para uma água...</div></p>

<p><div class="imagecc" style="width:500px"><a href="/blog/images/2009/12/dsc04993_1_1.jpg" title="Inclusive demos água apra este simpático ser =)"><img src="/blog/images/2009/12/dsc04993_1_1.jpg" width="480" height="360" alt="Inclusive demos água apra este simpático ser =)" border=0></a><br>Inclusive demos água apra este simpático ser =)</div></p>

<p>Coqueiros, coqueiros, coqueiros... passamos por Maragogi e enfim, 12h11, a divisa AL | PE!</p>

<p><div class="imagecc" style="width:500px"><a href="/blog/images/2009/12/dsc05031_1_1.jpg" title="AL | PE"><img src="/blog/images/2009/12/dsc05031_1_1.jpg" width="480" height="360" alt="AL | PE" border=0></a><br>AL | PE</div></p>

<p>Seguindo pela PE-060, por volta da hora do almoço (que nos últimos dias passava em branco), resolvemos almoçar em Porto de Galinhas - 13h22 =) . Em 2008 estive lá para o Bossa Conference, daí conheci um pouco da vila (é, a cidade mesmo chama Ipojuca, quem já andou pela PE-060 já viu as n placas da prefeitura reafirmando isso) e levei meu pai e Priscila para comer no restaurante <a href="http://www.barcaxeira.com.br/">Barcaxeira</a>. Comemos, compramos lembrancinhas, fotos e voltamos pra estrada (15h30) antes que o trânsito do final do feriado nos atrapalhasse.</p>

<p>Lá pelas 16h e alguma coisa, chegamos ao Recife! Praia de Boa Viagem por volta de 16h30 =)</p>

<p>Esse último dia acabou estendendo-se mais que o esperado pois resolvemos passear um pouco, até para que meu pai pudesse aproveitar um pouco pois tinha voo de volta marcado já para a noite de domingo. O importante foi que chegamo</p>

<p>s bem, não tivemos problemas sérios na viagem, brigamos um pouco, rimos muito, caímos em algumas roubadinhas, demos relativa sorte em outros momentos. Demorou, mas no fim compensou termos vindo de carro e não de avião =)</p>

<p>Para terminar, números:</p>

<p>Quilômetros dirigidos:</p>

<p>Anselmo : ~790km + ~460km (dia 3) + ~58 km (dia 4) = ~1308 km</p>

<p>Antonio (aka Pai) : ~786km + ~347km (dia 3) + ~179km (dia 4) = ~1312 km</p>

<p>Priscila : 0 km (mas dormiu bastente =)</p>

<p>Total (anotado) de aproximadamente 2620 km, contra os 2668km segundo o Google Maps para o caminho que fizemos. Os km faltantes a gente pode dizer que foi de piloto automático. Bom, em algum momento eu confiro as anotações pra ver onde eles sumiram =)</p>

<p>~ 190 litros de álcool</p>

<p>~14 km / L  (usando 2668 km)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Qt 4.6 & mobile-demos (pt_BR)]]></title>
    <link href="http://anselmolsm.org/blog/qt-4-6-mobile-demos-pt_br/"/>
    <updated>2009-12-01T00:00:00-02:00</updated>
    <id>http://anselmolsm.org/blog/qt-4-6-mobile-demos-pt_br</id>
    <content type="html"><![CDATA[<p>Hoje foi lançado o Qt 4.6.0! Também lançada a versão 1.3 do Qt Creator. Downloads em <a href="http://qt.nokia.com/downloads">http://qt.nokia.com/downloads</a></p>

<p>Além das novidades (http://qt.nokia.com/products/whats-new-in-qt)[desta versão], confira também os <a href="http://qtlabs.openbossa.org/mobile-demos/">mobile-demos!</a> (<a href="http://qt.gitorious.org/qt-labs/mobile-demos">Código Aqui</a>)</p>

<p>Pausa!</p>

<p>"O que é <strong>Qt</strong>?" - Veja um <a href="http://pt.wikipedia.org/wiki/Qt">resumo aqui</a> (embora esse artigo em português da Wikipedia precise dumas atualizações).</p>

<p>"<strong>Qt Creator</strong>?" - É uma IDE para desenvolvimento em Qt.</p>

<p><strong>mobile-demos</strong>? Tá, esse explico aqui =)</p>

<p>São alguns conceitos de aplicações criados pelos designers e desenvolvedores do openBossa visando principalmente dispositivos de telefonia móvel (vulgo ''celulares') Symbian / S60 - Plataforma que move cerca de vários celulares em todo o mundo, notoriamente (mas não exclusivamente) aparelhos Nokia.</p>

<p>Se você tem um celular S60 5th edition (N97, 5800), você encontra os pacotes em: <a href="http://qtlabs.openbossa.org/mobile-demos/">http://qtlabs.openbossa.org/mobile-demos/</a></p>

<p>Quem tem celulares S60 3rd (por exemplo N95, N85), também podem rodar esses demos! Claro que com restrições, já que eles foram pensados para telas sensíveis a toque. Existem alguns branchs no gitorious com algum suporte ao teclado, quem sabe num futuro próximo teremos novidades =)</p>

<p>Se você já é um dos felizes proprietários de um N900, também <a href="http://qtlabs.openbossa.org/mobile-demos/">temos pacotes para você</a>!</p>

<p>Se você está querendo ver do que se trata isso tudo, está rodando Windows e não quer se envolver com compilação, instalação de bibliotecas, etc, <del>aguarde que se possível ainda hoje haverá algo para você</del> veja os links abaixo do vídeo =)</p>

<p>Enquanto isso, confira o vídeo:
<iframe width="560" height="420" src="http://www.youtube.com/embed/PCx8RfNhhXk?color=white&theme=light"></iframe></p>

<p><strong>Update:</strong></p>

<p>Aqui estão as versões para você que quer brincar com os demos no seu desktop. São binários com Qt 4.6.0 linkados estaticamente, para você que ainda está com uma versão anterior do Qt ou nem tem instalado.</p>

<p>[Versão para Linux](http://www.anselmolsm.org/public/qt/mobile-demos_static-linux.tar.bz2</p>

<p><a href="http://www.anselmolsm.org/public/qt/mobile-demos_static-win32.zip">Versão para Windows</a></p>

<p>Mac: Estou sem mac no momento, contribuições são bem-vindas =)</p>
]]></content>
  </entry>
  
</feed>
